------- Problem 1 ------
-> {"id":0,"method":"echo","params":{"message":"Hello"}}
<- {"id": 0, "result": {"message": "Hello"}}
-> {"id":1,"method":"echo","params":{"message":"Hello again"}}
<- {"id": 1, "result": {"message": "Hello again"}}
-> {"id":0,"method":"echo","params":{"message":"aloha"}}
<- {"id": 0, "result": {"message": "aloha"}}
*****************************************************
Congratulations on completing the first problem!
The first problem exist to weed out idiots.

Here is the link to Problem 2: https://nubela-gitlab-packages.sgp1.digitaloceanspaces.com/dev-test/c04ee32265e0e6a2c853f6f91878cf8dfe385e3d68848931bf84e60b7cec9f8b.md
*****************************************************
------- Problem 2 ------
-> {"id": 0, "method": "echo",
-> {"id": 0, "method": "echo",
-> "params": {"message": "Hello"
-> }}
{
<- {"id": 0, "result": {"message": "Hello"}}
-> {"id": 0, "method": "echo",
-> "params": {"message": "Hello"
-> }}
{
<- {"id": 0, "result": {"message": "Hello"}}
-> "id": "test", "method": "echo",
-> "params": {"message": 
-> "hello again"}}
{
<- {"id": "test", "result": {"message": "hello again"}}
-> {"id": "w", "method": "echo",
-> "params": {"message": "hej
->  monika"}}
{
<- {"id": "w", "result": {"message": "hej monika"}}
*****************************************************
Congratulations on completing problem 2!
You are almost there.
Solve one more problem and you get an interview!

For Problem 3, please visit: https://nubela-gitlab-packages.sgp1.digitaloceanspaces.com/dev-test/8f48939bf9b1dd89184a8929681f21ca84343e3a12e6b6c57ecc713aa03a54c3.md
*****************************************************
------- Problem 3 ------
-------
Expect: x -> x
Randomized problem: q -> q
-> {"id":0,"method":"evaluate","params":{"expression":"q"}}
<- {"id": 0, "result": {"expression": "q"}}
Normalize result: q -> q
q == q
-------
Expect: !x.x -> !x.x
Randomized problem: !r.r -> !z.z
-> {"id":1,"method":"evaluate","params":{"expression":"!r.r"}}
<- {"id": 1, "result": {"expression": "!r.r"}}
Normalize result: !r.r -> !z.z
!z.z == !z.z
-------
Expect: (x y) -> (x y)
Randomized problem: (v z) -> (v z)
-> {"id":2,"method":"evaluate","params":{"expression":"(v z)"}}
<- {"id": 2, "result": {"expression": "(v z)"}}
Normalize result: (v z) -> (v z)
(v z) == (v z)
-------
Expect: (!x.x y) -> y
Randomized problem: (!r.r c) -> c
-> {"id":3,"method":"evaluate","params":{"expression":"(!r.r c)"}}
<- {"id": 3, "result": {"expression": "c"}}
Normalize result: c -> c
c == c
-------
Expect: (!x.x x) -> x
Randomized problem: (!l.l l) -> l
-> {"id":4,"method":"evaluate","params":{"expression":"(!l.l l)"}}
<- {"id": 4, "result": {"expression": "l"}}
Normalize result: l -> l
l == l
-------
Expect: (!x.!y.(y x) (y w)) -> !z.(z (y w))
Randomized problem: (!z.!j.(j z) (j d)) -> !z.(z (j d))
-> {"id":5,"method":"evaluate","params":{"expression":"(!z.!j.(j z) (j d))"}}
<- {"id": 5, "result": {"expression": "!y.(y (j d))"}}
Normalize result: !y.(y (j d)) -> !z.(z (j d))
!z.(z (j d)) == !z.(z (j d))
-------
Expect: (!x.!y.(x y) (y w)) -> !z.((y w) z)
Randomized problem: (!v.!j.(v j) (j f)) -> !z.((j f) z)
-> {"id":6,"method":"evaluate","params":{"expression":"(!v.!j.(v j) (j f))"}}
<- {"id": 6, "result": {"expression": "!z.((j f) z)"}}
Normalize result: !z.((j f) z) -> !z.((j f) z)
!z.((j f) z) == !z.((j f) z)
-------
Expect: ((!y.!x.(y x) !x.!y.(y x)) (y w)) -> !a.(a (y w))
Randomized problem: ((!y.!t.(y t) !t.!y.(y t)) (y x)) -> !z.(z (y x))
-> {"id":7,"method":"evaluate","params":{"expression":"((!y.!t.(y t) !t.!y.(y t)) (y x))"}}
<- {"id": 7, "result": {"expression": "!j.(j (y x))"}}
Normalize result: !j.(j (y x)) -> !z.(z (y x))
!z.(z (y x)) == !z.(z (y x))
-------
Expect: ((!y.!x.(y x) !x.(x x)) y) -> (y y)
Randomized problem: ((!n.!i.(n i) !i.(i i)) n) -> (n n)
-> {"id":8,"method":"evaluate","params":{"expression":"((!n.!i.(n i) !i.(i i)) n)"}}
<- {"id": 8, "result": {"expression": "(n n)"}}
Normalize result: (n n) -> (n n)
(n n) == (n n)
-------
Expect: (!y.(!x.!y.(x y) y) (y w)) -> !z.((y w) z)
Randomized problem: (!o.(!r.!o.(r o) o) (o j)) -> !z.((o j) z)
-> {"id":9,"method":"evaluate","params":{"expression":"(!o.(!r.!o.(r o) o) (o j))"}}
Error: Error while checking problem
    at checkProblems (/opt/src/question/problems/common.ts:24:19)
    at process.args (node:internal/process/task_queues:95:5)
    at main (/opt/src/question/index.ts:5:21) {
  [cause]: ConnectionError: ConnectionError
      at Socket.<anonymous> (/opt/src/question/client.ts:45:45)
      at Socket.emit (node:events:513:28)
      at Pipe.<anonymous> (node:net:313:12)
}
